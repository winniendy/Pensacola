#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Long;
use FindBin qw($Bin $RealBin);
use lib "$Bin";
use lib "$RealBin/../lib";
use lib "$RealBin/../ext/lib/perl5";
use File::Basename;
use Time::Piece;
use PhaME;
use Cwd;
# use Statistics::Distributions;
# use Parallel::ForkManagers;
use Bio::SeqIO;
use Bio::Tools::CodonTable;
use Cwd 'abs_path';
use Data::Dumper;
use FileHandle;
use Getopt::Std;
use diagnostics;
use fastq_utility;

$| = 1;

# set up environments
$ENV{PATH}
    = "$ENV{PATH}:$RealBin:$RealBin/../thirdParty/miniconda/bin:$RealBin/../bin";
$ENV{PERL5LIB}
    = ( $ENV{PERL5LIB} )
    ? "$ENV{PERL5LIB}:$RealBin/../lib:$RealBin/../ext/lib/perl5"
    : "$RealBin/../lib:$RealBin/../ext/lib/perl5";

=head

DESCRIPTION
   phame is a wrapper to run the PhaME analysis pipeline 

USAGE
   Control file "phame.ctl" needs to be copied and edited in the working directory. 
   This wrapper runs the PhaME pipeline based on the settings of the control file. 

REQUIREMENTS
   See PhaME manual for a complete list of system and software requirements

KNOWN BUGS
   Working script 

COPYRIGHT/LICENCE

AVAILABILITY
   
AUTHORS
   Migun Shakya
   Sanaa Ahmed
   Chienchi Lo
   2015/01/15
   B-10
   Los Alamos National Laboratory
=cut

#...............................................................................
# global variables
my $PACKAGENAME    = "PhaME";
my $PACKAGEVERSION = "1.0.5";
my $AUTHORS        = "Migun Shakya, Chien-Chi Lo, Sanaa Ahmed";
my $URL            = 'https://github.com/LANL-Bioinformatics/PhaME';
my $vcheck         = '';
my $refdir;     # variable storing directory with reference sequence
my $workdir;    # variable storing directory where all analysis will be done
my $outdir;
my $project;
my $rsignal = 0;
my $reference;
my $aligner = "bowtie";
my $name;
my $path;
my $suffix;
my $gsignal
    = 0;    # sequence should be parsed (1) for CDSor not (0), depends on gff
my $time       = 1;
my $data       = 0;
my $reads      = 2;
my $tree       = 2;
my $modeltest  = 0;
my $bsignal    = 0;     # bootstrap (1) or not (0).
my $bootstrap  = 100;
my $pselection = 0;
my $code       = 0;
my $type;
my $clean   = 1;
my $threads = 1;
my $cutoff  = 0.6;
my $annotation;
my $genefile;
my $runtime       = time;
my $nucmer        = 0;
my $contig_nucmer = 0;
my $read_mapping  = 0;
my $buildSNP      = 0;
my $buildtree     = 0;
my $ps            = 0;
my $bs            = 0;
my $gencode       = 1;
my %fasta_list;
my %contig_list;
my %read_list;
my $mappingGaps;
my $ptree;
my $buildSNPdb = 0;
my $message;
my $bindir = getBinDirectory();
my $ploidy;
my $snp_filter = 0.0;

#...............................................................................
# command line options

GetOptions(
    'vcheck'    => sub {check_version();exit(0);},
    'version|v' => sub { version() },
    'help|h'    => sub { printusage() }

);

if ( !@ARGV ) {
    print(@ARGV);
    print "$0: Argument required.\n";
    print "For help message use:\n";
    print "phame -h.\n";
    exit 1;
}

my $control = $ARGV[0] || "phame.ctl";

#...............................................................................
#check for depenencies

# from snippy
sub parse_version {
  my($cmd, $min, $re) = @_;
  open my $VER, '-|', $cmd.' 2>&1' or err("Could not open pipe to '$cmd', install '$cmd' and try again!");
  my $blob = join '', <$VER>;
  err("Could not read output of '$cmd'") unless $blob;
  #msg("parse=[$blob]");
  $blob =~ $re;
  my $ver = defined $1 ? $1 : 0;
  err("Need $cmd >= $min but you have $ver - please upgrade it.")
    if version->parse("v$ver") < version->parse("v$min");
  msg("Checking version: $cmd is >= $min - ok, have $ver");
  return $ver;
}


sub check_version {
    parse_version( 'samtools --version', 1.3,   qr/samtools\s(\d+\.\d+)/ms );
    parse_version( 'bcftools --version', 1.3,   qr/bcftools\s(\d+\.\d+)/ms );
    parse_version( 'nucmer --version',   3.1,   qr/version\s(\d+\.\d+)/ms );
    parse_version( 'bowtie2 --version',  2.3,   qr/version\s(\d+\.\d+)/ms );
    parse_version( 'bwa',                0.7,   qr/Version:\s(\d+\.\d+)/ms );
    parse_version( 'FastTree -expert',   2.1,   qr/FastTree\s(\d+\.\d+)/ms );
    parse_version( 'bbmap.sh -v',        38.06, qr/Version\s(\d+\.\d+)/ms );
    parse_version( 'raxmlHPC-PTHREADS -version', 8.2, qr/version\s(\d+\.\d+)/ms );
    print_timeInterval($runtime, "Dependencies look good!\n");
}

#----------------------------------------------------------------------

sub msg {
    my $t    = localtime;
    my $line = "[" . $t->hms . "] @_\n";
    print STDERR $line;
}

#----------------------------------------------------------------------

sub err {
    msg(@_);
    exit(2);
}

#...............................................................................

## Before run, run check version anyways
check_version();

## Read in control file
open( CTL, "$control" ) || die "Please provide a control file";

my $ctl_dir = dirname($control);
chdir $ctl_dir;
while (<CTL>) {
    if (/refdir\s*=\s*(\S+)\s*#{0,1}.*$/) {
        $refdir = Cwd::abs_path($1);
        if ( $refdir =~ /.+\/$/ ) { my $temp = chop($refdir); }
    }
    if (/workdir\s*=\s*(\S+)\s*#{0,1}.*$/) {
        $workdir = $1;
        if ( $workdir =~ /.+\/$/ ) { my $temp = chop($workdir); }
        $outdir = $workdir . '/results';
        if ( !-e $outdir ) { `mkdir -p $outdir`; }
        $workdir = Cwd::abs_path($workdir);
        $outdir  = Cwd::abs_path($outdir);
    }

    if (/project\s*=\s*(\S+)\s*#{0,1}.*$/) { $project = $1; }

    if (/reference\s*=\s*(0|1|2)\s*#{0,1}.*$/) { $rsignal = $1; }
    if (/aligner\s*=\s*(\S+)\s*#{0,1}.*$/)     { $aligner = $1; }
    if ( $rsignal == 1 && /reffile\s*=\s*(\S+)\s*#{0,1}.*$/ ) {
        $reference = "$refdir/$1";
    }
    elsif ( $rsignal == 0 ) {
        opendir( DIR, $refdir );
        my @reffiles
            = grep { /.[fna|fa|fasta|fsa]$/ && -f "$refdir/$_" } readdir(DIR);
        $reference
            = "$refdir/" . $reffiles[ int( rand( scalar(@reffiles) ) ) ];
        closedir DIR;
    }

    if (/cdsSNPS\s*=\s*(0|1)\s*#{0,1}.*$/) { $gsignal = $1; }

    #     0=No; 1=Yes
    #  if we want to build the SNPdb or just map to reference
    if (/buildSNPdb\s*=\s*(0|1)\s*#{0,1}.*$/) { $buildSNPdb = $1; }

    # default is NO.
    if (/FirstTime\s*=\s*(1|2)\s*#{0,1}.*$/) { $time = $1; }
    if (/data\s*=\s*(\d)\s*#{0,1}.*$/)       { $data = $1; }
    #     0=Finished; 1=contig; 2=reads; 3=F+C; 4=F+R; 5=C+R 6=F+C+R
    if (/\s+reads\s*=\s*(1|2|3)\s*#{0,1}.*$/) { $reads = $1; }
    if (/SNPsfilter\s*=\s*(\d+\.*\d+)\s*#.*$/) { $snp_filter = $1; }

    if (/tree\s*=\s*(0|1|2|3|4)\s*#{0,1}.*$/)   { $tree  = $1; }
    #0=no tree; 1=fasttree; 2=raxml; 3=iqtree;4=both

    if (/bootstrap\s*=\s*(0|1)\s*#{0,1}.*$/)     { $bsignal    = $1; }
    if (/N\s*=\s*(\d+)\s*#{0,1}.*$/)             { $bootstrap  = $1; }
    if (/PosSelect\s*=\s*(0|1|2|3)\s*#{0,1}.*$/) { $pselection = $1; }
    if ($pselection > 0) {$gsignal = 1; } # if ME is selected automaticall turn this on
    # it only reads single digit right now, can look later how to make it read double digits
    if (/GeneticCodes\s*=\s*(1|2|3|4|5|6|9|10|11|12|13|14|15|16|21|22|23)\s*#{0,1}.*$/) { $gencode = $1; } 

    if    (/code\s*=\s*(0|1|2)\s*#{0,1}.*$/) { $code = $1; }
    if    ( $code == 1 )                     { $type = "virus"; }
    elsif ( $code == 2 )                     { $type = "eukaryote"; }
    else                                     { $type = "bacteria"; }

    #     0=Bacteria; 1=Virus; 2=Eukaryote

    if (/clean\s*=\s*(0|1)\s*#{0,1}.*$/) { $clean = $1; }

    #     0=no clean; 1=clean
    if (/threads\s*=\s*(\d+)\s*#{0,1}.*$/) {
        $threads = $1;
        my $maxthreads
            = ( $^O =~ /darwin/ )
            ? `sysctl hw.ncpu | awk '{print \$2}'`
            : `grep -c ^processor /proc/cpuinfo`;
        if ( $threads < 1 || $threads > $maxthreads ) {
            die("-thread value must be between 1 and $maxthreads.\n");
        }
    }
    if (/cutoff\s*=\s*(\d+\.*\d+)\s*#.*$/) { $cutoff = $1; }

}
close CTL;
##########################################################################################

my $error   = "$outdir/$project.error";
my $logfile = "$outdir/$project.log";


print "PhaME v$PACKAGEVERSION \n";

# Picking up reference genome if one is not picked by the user
if ( $rsignal == 0 ) {
    opendir( DIR, $refdir );
    my @reffiles
        = grep { /.[fna|fa|fasta|fsa]$/ && -f "$refdir/$_" } readdir(DIR);
    $reference
        = "$refdir/" . $reffiles[ int( rand( scalar(@reffiles) ) ) ];
    closedir DIR;

# I add this here to just run mash regardless, but not use mash picked genome as reference
#    my $sketch_output = $workdir . "/sketch_output.txt";
#    my $mash_ref = PhaME::PickRefGenome( $workdir, $refdir, $error, $logfile,
#        $sketch_output );
}
elsif ( $rsignal == 2 ) {
    my $sketch_output = $workdir . "/sketch_output.txt";
    $reference = PhaME::PickRefGenome( $workdir, $refdir, $error, $logfile,
        $sketch_output );
}

elsif ( $rsignal == 1 ) {

# I add this here to just run mash regardless, but not use mash picked genome as reference
#    my $sketch_output = $workdir . "/sketch_output.txt";
#    my $mash_ref = PhaME::PickRefGenome( $workdir, $refdir, $error, $logfile,
#        $sketch_output );
}

( $name, $path, $suffix ) = fileparse( "$reference", qr/\.[^.]*/ );

print("\n");
&print_timeInterval( "\n$runtime\n", "Loading information\n" );
print "\trefdir = $refdir\n";
print "\tworkdir = $workdir\n";
print "\toutdir = $outdir\n";
print "\tproject = $project\n";
print "\tcdsSNPS = $gsignal\n";
print "\tbuildSNPdb:\t$buildSNPdb\n";
print "\tdata:\t$data\n";
if ( $tree == 1){
    print "\tTrees will be made using FastTree.\n"
} elsif ( $tree == 2){
    print "\tTrees will be made using RaxML.\n"
} elsif ( $tree == 3){
    print "\tTrees will be made using iqtree.\n"
} elsif ( $tree == 4){
    print "\tTrees will be made using all three methods.\n"
} elsif ($tree == 0){
    print "\tNo Trees to be made.\n"
}

if ( $bsignal == 0 and $tree > 0 ){
    print "\tNo bootstraps.\n"
}

if ( $bsignal == 1 and $tree > 0 ){
    print "\t$bootstrap bootstraps!\n"
}

if ($pselection > 0 ) {
    print "\tMolecular Evolution analysis will be performed.\n";
    print "\tGenetic code used is code # $gencode.\n";
}


if ( !-d $refdir || !-d $workdir || !-d $outdir ) {
    print
        "One or more of the above directories does not exist.\nPlease provide correct directory paths\n";
}

print "\tReference:\t$reference\n";
if ( !-e "$reference" ) {
    print "File $reference does not exist.\n";
    exit;
}

if ( $gsignal == 1 ) {
    if ( -e "$refdir/$name.gff" ) {
        $annotation = "$refdir/$name.gff";
        print "\tAnnotation:\t$annotation\n";
    }
    elsif ( -e "$refdir/$name.gff3" ) {
        $annotation = "$refdir/$name.gff3";
        print "\tAnnotation:\t$annotation\n";
    }
    else {
        $message = <<"END_MESSAGE";
            File $refdir/$name.gff or $refdir/$name.gff3 does not exist.

            You selected cdsSNPs = 1, but did not provide a GFF file.

            I don't know how to proceed.

            Please provide correct GFF file or set cdsSNPs=0 and rerun!
END_MESSAGE
        print $message;
        exit;
    }
}

if ( $pselection > 0 ) {
    if ( -e "$refdir/$name.gff" ) {
        $genefile = "$refdir/$name.gff";
        print "\tGenes:\t$genefile\n";
    }
    elsif ( -e "$refdir/$name.gff3" ) {
        $genefile = "$refdir/$name.gff3";
        print "\tGenes:\t$genefile\n";
    }
    else {
        $message = <<"END_MESSAGE";
            File $refdir/$name.gff or $refdir/$name.gff3 does not exist.

            You turned on selection analysis (PosSelect), but did not provide a GFF file.

            I don't know how to proceed.

            Please provide correct GFF file or turn OFF posSelect (set to 0) and rerun!
END_MESSAGE
        print $message;
        exit;
    }

}

print "\tSNPs filter:\t$snp_filter\n";
print "\tCode:\t$type\n";
print "\tLog file:\t$logfile\n";
print "\tError file:\t$error\n";

&print_timeInterval( $runtime, "Checking directories and files... \n" );
my $check = PhaME::check( $workdir, $refdir, $time, $data, $name, $logfile,
    $project );
if ( $data == 7 ) { $check = 0; }

#print "\nCHECK:\t$check\n";
my $snpdir  = $outdir . '/snps';
my $gapdir  = $outdir . '/gaps';
my $statdir = $outdir . '/stats';
my $summary = $outdir . '/' . "$project\_genome_lengths.txt";
`mkdir -p $snpdir $gapdir $statdir`;

if ( $time == 1 && $check == 0 && $data != 7 ) {
    open( ALL, ">$workdir/working_list.txt" ) || die "$!";
    open( STAT, ">$summary" ) || die "$!";
    print STAT "Genome\tLength(bp)\n";
}

if ( $time == 1 && $check > 0 ) {
    open( ALL, ">>$workdir/working_list.txt" ) || die "$!";
}
elsif ( $time == 2 || $data == 7 ) {
    open( ALL, ">>$workdir/working_list.txt" ) || die "$!";
    open( STAT, ">>$summary" ) || die "$!";
    print STAT "Genome\tLength(bp)\n";
}

if ( $check == 0 ) {
    if ( $data == 0 ) {
        &print_timeInterval( $runtime, "Running PhaME for complete genomes ONLY\n" );
        $nucmer    = 1;
        $buildSNP  = 1;
        $buildtree = 1;
        if ( $pselection > 0 ) { $ps = 1; }
    }
    if ( $data == 1 ) {
        &print_timeInterval( $runtime, "Running PhaME for Contigs ONLY\n" );
        my ( $list, $genome_size )
            = PhaME::prepareComplete( $workdir, $reference, $name )
            if ( $time ne "2" );
        $fasta_list{$list} = $genome_size if ($list);
        $contig_nucmer     = 1;
        $buildSNP          = 1;
        $buildtree         = 1;
        if ( $pselection > 0 ) { $ps = 1; }
    }
    if ( $data == 2 ) {
        &print_timeInterval( $runtime, "Running PhaME for Reads ONLY\n" );
        my ( $list, $genome_size )
            = PhaME::prepareComplete( $workdir, $reference, $name )
            if ( $time ne "2" );
        $fasta_list{$list} = $genome_size if ($list);
        $read_mapping      = 1;
        $buildSNP          = 1;
        $buildtree         = 1;
        if ( $pselection > 0 ) { $ps = 1; }
    }
    if ( $data == 3 ) {
        &print_timeInterval( $runtime, "Running PhaME for Complete and genomes with contigs\n" );
        $nucmer        = 1;
        $contig_nucmer = 1;
        $buildSNP      = 1;
        $buildtree     = 1;
        if ( $pselection > 0 ) { $ps = 1; }
    }
    if ( $data == 4 ) {
        &print_timeInterval( $runtime, "Running PhaME for Complete and read samples\n" );
        $nucmer       = 1;
        $read_mapping = 1;
        $buildSNP     = 1;
        $buildtree    = 1;
        if ( $pselection > 0 ) { $ps = 1; }
    }
    if ( $data == 5 ) {
        &print_timeInterval( $runtime, "Running PhaME for genomes with contigs and read samples\n" );
        my ( $list, $genome_size )
            = PhaME::prepareComplete( $workdir, $reference, $name )
            if ( $time ne "2" );
        $fasta_list{$list} = $genome_size if ($list);
        $contig_nucmer     = 1;
        $read_mapping      = 1;
        $buildSNP          = 1;
        $buildtree         = 1;
        if ( $pselection > 0 ) { $ps = 1; }
    }
    if ( $data == 6 ) {
        &print_timeInterval( $runtime, "Running PhaME for complete, genomes with contigs, and read samples\n" );
        $nucmer        = 1;
        $contig_nucmer = 1;
        $read_mapping  = 1;
        $buildSNP      = 1;
        $buildtree     = 1;
        if ( $pselection > 0 ) { $ps = 1; }
    }
    if ( $data == 7 ) {
        &print_timeInterval( $runtime, "Realignment..\n" );
        $buildSNP  = 1;
        $buildtree = 1;
        if ( $pselection > 0 ) { $ps = 1; }
    }
}

if ( $time == 1 ) {
    if ( $check == 1 ) {
        print "\n\tContinuing run...\n";
        if ( $data <= 2 ) {
            $buildSNP  = 1;
            $buildtree = 1;
            if ( $pselection > 0 ) { $ps = 1; }
        }
        if ( $data == 3 ) {
            $contig_nucmer = 1;
            $buildSNP      = 1;
            $buildtree     = 1;
            if ( $pselection > 0 ) { $ps = 1; }
        }
        if ( $data == 4 || $data == 5 ) {
            $read_mapping = 1;
            $buildSNP     = 1;
            $buildtree    = 1;
            if ( $pselection > 0 ) { $ps = 1; }
        }
        if ( $data == 6 ) {
            $contig_nucmer = 1;
            $read_mapping  = 1;
            $buildSNP      = 1;
            $buildtree     = 1;
            if ( $pselection > 0 ) { $ps = 1; }
        }
    }
    if ( $check == 2 ) {
        print "\n\tContinuing run...\n";
        if ( $data <= 2 ) {
            $buildtree = 1;
            if ( $pselection > 0 ) { $ps = 1; }
        }
        if ( $data > 2 && $data < 6 ) {
            $buildSNP  = 1;
            $buildtree = 1;
            if ( $pselection > 0 ) { $ps = 1; }
        }
        if ( $data == 6 ) {
            $read_mapping = 1;
            $buildSNP     = 1;
            $buildtree    = 1;
            if ( $pselection > 0 ) { $ps = 1; }
        }
    }
    if ( $check == 3 ) {
        if ( $data <= 2 ) {
            if ( $pselection > 0 ) {
                print "\n\tContinuing run...\n";
                $ps = 1;
            }
            else {
                &print_timeInterval( $runtime,
                    "\nRun is complete... Nothing to do here\n" );
            }
        }
        if ( $data > 2 && $data < 6 ) {
            print "\n\tContinuing run...\n";
            $buildtree = 1;
            if ( $pselection > 0 ) { $ps = 1; }
        }
        if ( $data == 6 ) {
            print "\n\tContinuing run...\n";
            $buildSNP  = 1;
            $buildtree = 1;
            if ( $pselection > 0 ) { $ps = 1; }
        }
    }
    if ( $check == 4 ) {
        if ( $data > 2 && $data < 6 ) {
            if ( $bsignal == 1 ) { print "\n\tContinuing run...\n"; $bs = 1; }
            if ( $pselection > 0 ) {
                print "\n\tContinuing run...\n";
                $ps = 1;
            }
            else {
                &print_timeInterval( $runtime,
                    "\nRun is complete... Nothing to do here\n" );
            }
        }
        if ( $data == 6 ) {
            print "\n\tContinuing run...\n";
            $buildtree = 1;
            if ( $pselection > 0 ) { $ps = 1; }
        }
    }
}
if ( $time == 2 && $check == 1 ) { exit; }
if ( $check == 0 ) {
    &print_timeInterval( $runtime, "Complete. \n" );
}

&print_timeInterval( $runtime, "Preparing files... \n" );
if ( $check == 0 ) {
    `mkdir -p $workdir/files`;

    if ( $time == 1 ) {
        opendir( DIR, $refdir );
        while ( my $files = readdir(DIR) ) {
            next if ( $files =~ /^\..?/ );
            my ( $rname, $rpath, $rsuffix )
                = fileparse( "$files", qr/\.[^.]*/ );
            if ( $nucmer == 1 ) {
                if ( $files =~ /.+\.fn|s?a?s?t?a$/ ) {
                    my $fasta = "$refdir/$files";
                    my ( $list, $genome_size )
                        = PhaME::prepareComplete( $workdir, $fasta, $rname );
                    $fasta_list{$list} = $genome_size;
                }
            }
        }
        closedir DIR;
    }

    opendir( DIR, $workdir );
    while ( my $files = readdir(DIR) ) {
        next if ( $files =~ /^\..?/ );
        my ( $qname, $qpath, $qsuffix ) = fileparse( "$files", qr/\.[^.]*/ );
        if ( $nucmer == 1 ) {
            if (   $files =~ /.+\.fn|s?a?s?t?a$/
                && $files !~ /.+\.contig$|\.contigs$|\.ctg$]$/
                && $files !~ /fa?s?t?q/ )
            {
                my $fasta = "$workdir/$files";
                if ( !exists $fasta_list{$qname} ) {
                    my ( $list, $genome_size )
                        = PhaME::prepareComplete( $workdir, $fasta, $qname );
                    $fasta_list{$list} = $genome_size;
                }
            }
        }
        if ( $contig_nucmer == 1 ) {
            if (   $files =~ /.+\.contig$|\.contigs$|\.ctg$]$/
                && $files !~ /fa?s?t?q/ )
            {
                my $contig = $workdir . '/' . $files;
                my ( $list, $genome_size )
                    = PhaME::prepareContig( $workdir, $contig, $qname );
                $contig_list{$list} = $genome_size;
            }
        }
        if ( $read_mapping == 1 ) {
            if ( $files =~ /.+\.f{1}a?s?t?q$/
                && $files !~ /.+\.f{1}n|s?a?s?t?a$/
                && $files !~ /.+\.contig$|\.contigs$|\.ctg$]$/ )
            {
                my $fastq = $refdir . '/' . $files;
                my $read_list_name;
                if ( $qname =~ /(.+)[_.]R?[12]$/ ) {
                    if ( $reads == 2 ) {
                        $read_list_name = $1 . '_pread';

                        #                   print "$read\n";
                    }
                    if ( $reads == 1 && !exists $read_list{"$1_pread"} ) {
                        print "Running PhaME for single end reads only (*.fastq)\n";
                        $read_list_name = $1 . '_sread';
                    }
                    if ( $reads == 3 ) {
                        print "Running PhaME for both single and paired end reads (*R1.fastq and *R2.fastq, and *.fast)\n";
                        delete $read_list{"$1_sread"};
                        $read_list_name = $1 . '_read';
                        $read_list_name = $1 . '_pread'
                            if ( !-e "$workdir/$1.fastq"
                            && !-e "$workdir/$1.fq" );
                    }
                    $read_list{$read_list_name}++;
                }
                else {
                    next
                        if ( $reads == 2
                        || exists $read_list{"${qname}_read"} );
                    $read_list_name = $qname . '_sread';
                    $read_list{$read_list_name}++;
                }
            }
        }
    }
    closedir DIR;
    &print_timeInterval( $runtime, "Complete. \n" );
}    # check=0

$name =~ s/\W/_/g;    # Replacing special characters with _

$reference = "$workdir/files/$name.fna";

if ( $nucmer == 1 ) {
    open( FAS, ">$workdir/fasta_list.txt" ) || die "$!";

    # open( CON, ">$workdir/contigs_list.txt" ) || die "$!";

    foreach my $names ( sort keys %fasta_list ) {
        print FAS "$names\n";
        print ALL "$names\n";
        print STAT "$names\t", $fasta_list{$names}, "\n"
            if ( $time ne "2" );

        #      print "$names\t",$fasta_list{$names},"\n";
    }

    &print_timeInterval( $runtime, "Running NUCmer on complete genomes\n" );
    PhaME::completeNUCmer( $reference, $workdir, $bindir,
        "$workdir/fasta_list.txt", $type, $threads, $error, $logfile,
        $buildSNPdb );
    &print_timeInterval( $runtime, "NUCmer on genomes complete\n" );
}

if ( $contig_nucmer == 1 ) {
    open( CON, ">$workdir/contigs_list.txt" ) || die "$!";
    foreach my $names ( sort keys %contig_list ) {
        print CON "$names\n";
        print ALL "$names\n";
        print STAT "$names\t", $contig_list{$names}, "\n";
    }
    if ( $buildSNPdb == 1 ) {

        &print_timeInterval( $runtime, "Running NUCmer on contigs\n" );
        PhaME::contigNUCmer( $workdir, $bindir, "$workdir/contigs_list.txt",
            $code, $threads, $reference, $time, $error, $logfile );
    }
    elsif ( $buildSNPdb == 0 ) {
        &print_timeInterval( $runtime, "Running NUCmer on contigs\n" );
        PhaME::contigNUCmer( $workdir, $bindir, "$workdir/contigs_list.txt",
            $code, $threads, $reference, 2, $error, $logfile );
    }

#   PhaME::contigNUCmer($workdir,$bindir,"$workdir/contigs_list.txt",$threads,$reference,"2",$error);
}
close STAT;

# based on type, assign ploidy info to ploidy variable. Will be used later when calling SNPs
# print "$type\n\n\";
if ($type eq "eukaryote") {$ploidy = "diploid";}
else {$ploidy = "haploid";}

if ( $read_mapping == 1 ) {
    open( READ, ">$workdir/reads_list.txt" ) || die "$!";
    foreach my $names ( keys %read_list ) { print ALL "$names\n"; }
    foreach my $names ( keys %read_list ) { print READ "$names\n"; }
    &print_timeInterval( $runtime, "Preparing to map reads\n" );

    if ( $time == 2 ) {
        &print_timeInterval( $runtime, "Identifying all gaps\n" );
        $mappingGaps
            = PhaME::identifyGaps( $outdir, "$workdir/fasta_list.txt", $name,
            "map", $project, $error, $logfile );
        PhaME::removeGaps( $bindir, $reference, $mappingGaps, $error, $logfile );
        &print_timeInterval( $runtime, "Mapping reads to reference\n" );
        my $end
            = PhaME::readsMapping( $workdir, $bindir,
            "$workdir/reads_list.txt", $threads, $name, $error, $aligner, $ploidy, $snp_filter,
            $logfile );
        &print_timeInterval( $runtime, "$end\n" );
    }
    elsif ( $time == 1 ) {
        my $tempdir = $outdir . '/temp/';
        `mkdir -p $tempdir; cp $reference $tempdir`;
        &print_timeInterval( $runtime, "Mapping reads to reference\n" );
        my $end
            = PhaME::readsMapping( $workdir, $bindir,
            "$workdir/reads_list.txt", $threads, $name, $error, $aligner, $ploidy, $snp_filter,
            $logfile );
        &print_timeInterval( $runtime, "$end\n" );
    }
}

if ( $buildSNP == 1 ) {
    &print_timeInterval( $runtime, "Beginning SNP detection pipeline\n" );
    &print_timeInterval( $runtime, "Starting with gaps\n" );
    PhaME::identifyGaps( $outdir, "$workdir/working_list.txt", $name, "snp",
        $project, $error, $logfile );
    &print_timeInterval( $runtime, "Gap identification complete\n" );
    if ( $gsignal == 1 ) {
        # &print_timeInterval( $runtime, "Preparing to identify SNPs\n" );
        &print_timeInterval( $runtime,
            "GFF file provided, SNPs will be differentiated as coding vs noncoding\n");
        my ( $genname, $genpath, $gensuffix )
            = fileparse( "$annotation", qr/\.[^.]*/ );
        $genname =~ tr|.|_|;
        PhaME::codingRegions( $outdir, $annotation, $genname );
        &print_timeInterval( $runtime, "$annotation\n" );        
    }
    &print_timeInterval( $runtime, "Preparing to identify SNPs\n" );
    my $end
        = PhaME::buildSNPDB( $outdir, $bindir, $reference,
        "$workdir/working_list.txt", $project, $gsignal, $error, $logfile,
        $cutoff );
    if ( $gsignal == 1 ) {
        # print "\tSNPs from contigs and/or raw reads will be parsed\n";
        # print "\tto synonymous and non-synonymous if given\n\n";
        my ( $genname, $genpath, $gensuffix )
            = fileparse( "$annotation", qr/\.[^.]*/ );
        $genname =~ tr|.|_|;
        my $cds_gff     = $outdir . "/$genname\_cds.gff";
        my $snps_folder = $outdir . "/snps";
        my $ref_fasta   = "$workdir/files/$genname.fna";
        PhaME::SNPsAnalysis( $cds_gff, $snps_folder, $ref_fasta, $logfile,
            $error);
    }

    &print_timeInterval( $runtime, "$end\n" );
}

if ( $buildtree == 1 || $bs == 1) {
    if ($tree > 0 ){
        &print_timeInterval( $runtime, "Reconstructing all SNPs phylogeny\n" );
        my $end = PhaME::buildTree( $bindir, $outdir, $threads, $tree,
        "$project", $bsignal, $bootstrap, $error, $logfile );
        &print_timeInterval( $runtime, "All SNPs Phylogeny Complete.\n" );
        if ( $gsignal == 1 ) {
            &print_timeInterval( $runtime, "Reconstructing CDS SNP phylogeny\n" );
            PhaME::buildTree( $bindir, $outdir, $threads, $tree, "$project\_cds", 0, $bootstrap, 
            $error, $logfile );
            &print_timeInterval( $runtime, "CDS SNPs phylogeny Complete.\n" );
        }
        # if ( $bsignal == 1 ) {
        #     &print_timeInterval( $runtime, "Bootstrapping phylogeny...\n" );
        #     my $end = PhaME::bootstrap( $bindir, $outdir, $threads, $tree,
        #     "$project", $bootstrap, $error, $logfile );
        #     &print_timeInterval( $runtime, "Bootstrapping complete.\n" );
        # }
    }
}

my $tinfo      = $refdir . "/RAxML_info.$project\_all";
my $tlog       = $refdir . "/RAxML_log.$project\_all";
my $tparsimony = $refdir . "/RAxML_parsimonyTree.$project\_all";
my $tresult    = $refdir . "/RAxML_result.$project\_all";
my $tbest      = $refdir . "/RAxML_bestTree.$project\_all";
if ( -e $tinfo )      { `mv $tinfo $outdir/`; }
if ( -e $tlog )       { `mv $tlog $outdir/`; }
if ( -e $tparsimony ) { `mv $tparsimony $outdir/`; }
if ( -e $tresult )    { `mv $tresult $outdir/`; }
if ( -e $tbest )      { `mv $tbest $outdir/`; }
if ( $tree == 2 || $tree == 3 ) {
    $tbest = $outdir . "/RAxML_bestTree.$project\_cds";
}
if ( $tree == 1 ) {
    $tbest = $outdir . "/RAxML_bestTree.$project";
}
################################################################################
my $pamldir;
my $hyphydir;
if ( $ps == 1 ) {    # if selection analysis is turned ON
    my $end        = 0;
    my $stats_file = $outdir . "/$project\_stats.txt";
    my $genedir    = $outdir . '/PSgenes';
    my $gapfile    = $outdir . "/$project\_gaps.txt";

    # start making trees for PAML
    if ( $pselection == 1 || $pselection == 3 ) {
        $pamldir = $outdir . '/paml';
        if ( !-d $pamldir ) {
            `mkdir -p $pamldir`;
        }
        if ( $tree == 2 || $tree == 3 ) {
            `cp $tbest $pamldir`;
        }
        if ( $tree == 2 || $tree == 3 ) {
            $ptree = $pamldir . "/RAxML_bestTree.$project\_cds";
        }
        if ( $tree == 1 ) {

            # need to make raxml best tree
            PhaME::buildTree( $bindir, $outdir, $threads, 2,
                "$project", 0, $bootstrap, $error, $logfile );
            $pamldir = $outdir . '/paml';
            if ( !-d $pamldir ) { `mkdir -p $pamldir`; }
            $ptree = $pamldir . "/RAxML_bestTree.$project";
            `cp $tbest $ptree`;
        }
        elsif ( $tree == 0 ) {
            print
                "Need to build a tree before any evolutionary analyses can be performed.\n";
            exit;
        }
    }

    if ( $pselection == 2 || $pselection == 3 ) {
        $hyphydir = $outdir . '/hyphy';
        if ( !-d $hyphydir ) {
            `mkdir -p $hyphydir`;
        }
        if ( $tree == 2 || $tree == 3 ) {
            `cp $tbest $hyphydir`;
        }
        if ( $tree == 2 || $tree == 3 ) {
            $ptree = $hyphydir . "/RAxML_bestTree.$project\_cds";
        }
        if ( $tree == 1 ) {

            # need to make raxml best tree
            PhaME::buildTree( $bindir, $outdir, $threads, 2,
                "$project", 0, $bootstrap, $error, $logfile );
            $hyphydir = $outdir . '/paml';
            if ( !-d $hyphydir ) { `mkdir -p $hyphydir`; }
            `cp $tbest $hyphydir`;
            $ptree = $hyphydir . "/RAxML_bestTree.$project";
        }
        elsif ( $tree == 0 ) {
            print
                "Need to build a tree before any evolutionary analyses can be performed.\n";
            exit;
        }
    }


    # PREPARE FILES FOR RUNNING PAML OR HYPHY ANALYSIS
    # start extracting genes
    &print_timeInterval( $runtime, "Extracting genes that have SNPs\n" );
    $end
        = PhaME::extractGenes( $outdir, $stats_file, $reference, $bindir,
        "$workdir/working_list.txt", $threads, $gapfile, $genefile, $error,
        $logfile );
    &print_timeInterval( $runtime, "$end\n" );

    # translate genes
    &print_timeInterval( $runtime, "Translating genes that have SNPs\n" );
    $end = PhaME::translateGenes( $outdir, $bindir, $threads, "translate",
                                 $gencode, $error, $logfile );
    &print_timeInterval( $runtime, "$end\n" );

    # align genes
    &print_timeInterval( $runtime, "Align proteins that have SNPs\n" );
    $end = PhaME::alignGenes( $outdir, $bindir, $threads, "mafft", $gencode, $error,
        $logfile );
    &print_timeInterval( $runtime, "$end\n" );

    # reverse translate genes
    &print_timeInterval( $runtime, "Reverse translate amino acids to codon\n" );
    $end = PhaME::revTransGenes( $outdir, $bindir, $threads, "pal2nal", $gencode,
        $error, $logfile );
    &print_timeInterval( $runtime, "$end\n" );

    # core genome cdn alignment
    &print_timeInterval( $runtime, "Join all alignments to create core gene alignment\n" );
    my $core = $genedir . "/" . $project . "_core_genome.cdn";
    $end = PhaME::core( $outdir, $bindir, $core, $error, $logfile );
    &print_timeInterval( $runtime, "$end\n" );

    # RUN PAML
    if ( $pselection == 1 || $pselection == 3 ) {
        &print_timeInterval( $runtime, "Running PAML...\n" );
        $end = PhaME::paml(
            $outdir, $bindir,     $ptree, 0,
            "Sites", "0,1,2,7,8", $core,  $threads,
            $error,  $logfile
        );
        &print_timeInterval( $runtime, "$end\n" );
        &print_timeInterval( $runtime, "Running PAML with branch length...\n" );
        PhaME::paml(
            $outdir, $bindir,  $ptree, 2, "BrSites", 0,
            $core,   $threads, $error, $logfile
        );
        &print_timeInterval( $runtime, "$end\n" );
    }

    # RUN HYPHY
    if ( $pselection == 2 || $pselection == 3 ) {
        &print_timeInterval( $runtime, "Running HyPhy...\n" );
        PhaME::hyphy(
            $outdir,  $bindir, $tbest, $ptree, $core,
            $threads, "bsrel", $error, $logfile
        );
        &print_timeInterval( $runtime, "$end\n" );
    }
}
################################################################################
if ($clean) { PhaME::clean($outdir); }

PhaME::movefiles($outdir, $tree, $data);
&print_timeInterval( $runtime, "Run Complete!, Check $workdir/results folder for results.\n" );

close STDOUT;
###########################################################
#
# SUBROUTINES
#
###########################################################

sub getBinDirectory {
    my @t = split '/', "$FindBin::RealBin";
    my $path = join '/', @t;
    return ($path);
}

sub print_timeInterval {
    my $now = shift;
    my $msg = shift;

    $now = time - $now;

    my $string = sprintf "%02d:%02d:%02d", int( $now / 3600 ),
        int( ( $now % 3600 ) / 60 ), int( $now % 60 );
    print "[$string]  $msg";
}

sub version {
    print "$PACKAGENAME (version $PACKAGEVERSION)\n";
    exit;
}

sub printusage {
    print "\n$PACKAGENAME (version $PACKAGEVERSION)\n";
    print "\nUSAGE: phame <control file>\n\n";
    print "-h show this help message and exit\n";
    print "-v show version number and exit\n";
    print "--vcheck checks if all depenencies are correct and in path.\n";
    exit;
    print "\n";
    print "\n";
}

